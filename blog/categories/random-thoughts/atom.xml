<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: random thoughts | heelhook]]></title>
  <link href="http://heelhook.github.io/blog/categories/random-thoughts/atom.xml" rel="self"/>
  <link href="http://heelhook.github.io/"/>
  <updated>2013-05-29T18:03:36-03:00</updated>
  <id>http://heelhook.github.io/</id>
  <author>
    <name><![CDATA[Pablo Fernandez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The essay is the unit]]></title>
    <link href="http://heelhook.github.io/blog/2013/04/15/the-essay-is-the-unit/"/>
    <updated>2013-04-15T11:18:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2013/04/15/the-essay-is-the-unit</id>
    <content type="html"><![CDATA[<p>While I was reading <a href="https://medium.com/life-hacks/80f8d525b0d8">“The distraction-free iPhone (or ‘Why I’m happier since I
disabled Safari’)”</a> I noticed a bunch of icons alongside different
paragraphs.</p>

<p>Obviously, before finishing reading an article about short time span and
productivity (how many productivity articles have been written in the past
couple months?!), I had to know what those icons were.</p>

<p>As I suspected, they were discussions that medium.com allows to have on each
single paragraph.</p>

<!-- more -->


<p>I believe this is wrong.</p>

<p>The smallest unit of an essay is not a paragraph, a sentence, or a word. Its the
essay. Motivating and promoting people to dissect and discuss bits and fragments
of an essay is a recipe for misunderstandings and half-baked thoughts. I
understand the motivation, but I believe it sets up the stage to have the wrong
kind of discussions.</p>

<p>FWIW, the article itself, <a href="https://medium.com/life-hacks/80f8d525b0d8">“The distraction-free iPhone (or ‘Why I’m happier
since I disabled Safari’)”</a>, is good and a worthwhile experiment. Not an
insightful comment, but hey, I’d rather try the experiment <a href="https://medium.com/@jakek">Jake</a> proposes
before commenting on it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenges of maintaining a rapidly changing code base]]></title>
    <link href="http://heelhook.github.io/blog/2013/02/18/challenges-of-maintaining-a-rapidly-changing-code-base/"/>
    <updated>2013-02-18T19:39:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2013/02/18/challenges-of-maintaining-a-rapidly-changing-code-base</id>
    <content type="html"><![CDATA[<p>For the past year, I have been working as cofounder at SkillHound working intensely on the development side. The concept of SkillHound came to be after spending a few months in 2011 reading and implementing proof of concepts data mining code to extract knowledge from git repositories.</p>

<p>My cofounder and myself are both (who isn't these days among the HN crowd?) Steve Blank's method practitioners wannabes. We couldn't wait to get our feet wet going through the Startup Owner's Manual's table of contents with our very own concept.</p>

<p>Derek is not a developer, although he is good at screwing up the indention of my HAML files haha — jk derek! As the only developer in the team, I'm the sole responsible for the codebase's sanity (and my own).</p>

<!-- more -->


<p>I've managed several codebases before (as pretty much every other developer out there). Coming from CVS and SVN, I learned to love and accept Git's amazing power and minor-ux annoyances (let's not start a flamewar here).</p>

<p>The experience with this startup's codebase has been different. Very, very different. Following the Customer Discovery method, we implemented a barebones prototype of our product, not quite a full blown MVP but a <em>Minimal Viable Demo</em>. And all was good. We would go to what we thought might be our prospective customer, talked to them for 45 minutes, demoed for 5 minutes, and talked for another 10 minutes.</p>

<p>This was an extremely useful process, every single time we would finish a call or a meeting we would have ideas of what to change or what the product was. Over the course of just two or three months we had changed our target industry, shifted the target user two or three times and created what seemed (and was, for all intents and purposes) an entirely new product about 10 times. You could say that the only thing that didn't change was name, and you would be wrong, because we changed that too after some time.</p>

<p>Throughout the first stage of this startup, as with most if not all startups, the priority was (as it should be) finding a market and a pain point that can be addresses within that market, then identifying what the MVP that addresses that pain point should look like. Code base stability, proper engineering and maintainability come at a distant third or fourth in the list of priorities.</p>

<p>Particularly in the first few months we had very drastic shifts, and each week the product would change significantly. In hindsight, perhaps a new code base would be in order on every micro pivot, leaving behind a library of common modules that were being used, but this was hard, as hardly a single method would remain unaffected. But that's not what happened. No. As we shifted from one market to the other, from user to user, I would slowly adapt existent code in the name of speed, I would reuse code that was intended for A to be used for A', only to realize two days later that A' was not in our best interest, but might work well to address A''.</p>

<p>Over time, the codebase became chaotic, with entires modules of the architecture that remained from previous iterations, much like our <a href="http://whyevolutionistrue.wordpress.com/2011/02/22/vestigial-trait-the-arrector-pili/">arrector pili</a>, just a vestigial trait of a predecessor of the current being.</p>

<h2>Defaulting on technical debt — AKA "F*ck it, lets rewrite this"</h2>

<p>Most of us, at one point or another, flirt with the idea of refactoring an entire or significant part of a codebase. Oh, the magic wand that will fix all problems in that tired codebase we inherited (from someone else or from ourselves).</p>

<p>As you flirt more and more with the idea it becomes ever more compelling, the mere fact of thinking about adding a new feature to the polluted codebase hurts when you compare it to the inherit beauty and simplicityof a naked canvas. As the idea starts taking shape of how you would do it right this time, how if you only had the time all problems would be fixed. This time it'll be different. You are a different person, you know more about the product, about the technology, about the market.</p>

<p>And yes, in all likelyhood the product will be different. But that doesn't mean that in five months or a year you won't be in a similar situation, again, reaching for the blank canvas.</p>

<p>The reality is, rewriting a codebase is, almost always a receipe for disaster, unless your product belongs to that theoretical 1% of niches where speed, market landscape and needs don't rapidly change, rewriting will create a significant advantage to your competitors.</p>

<h2><code>git init .</code></h2>

<p>I admit it I gave away to the temptation. After a couple of days of entertaining the idea of a complete rewrite, even after being burned many many years ago with one that ultimately destroyed my email client for Gnome project. I realized I was being lured in into Fuckville. 180-U-turn. Now.</p>

<p>Instead, I created a branch where I would start deleting code like there was no tomorrow. No. It wasn't a rewrite, it was the ultimate axing of obsolete code. A good way to start a refactor effort that will accompany a healthy codebase throughout its lifetime.</p>

<h2>Lesson</h2>

<p>What am I doing now that minimizes the problems related to the fast pace of a code base? What did I change from the start?</p>

<p>The lessons I've drawn from this experience have been mostly related to observe what I did and largely repeat the same behavior but with more determination. Its largely the lesson I drew from <a href="http://www.amazon.com/The-Art-Racing-Rain-Novel/dp/0061537969"><em>The Art of Racing in the Rain</em></a>: <em>when you anticipate chaos, don't try to control it, rather, factor it in and accept it</em>.</p>

<p>What I mean by that is, when dealing with a codebase that deals with an unknown and ambiguous problem, don't try to tame the instability and chaotic nature of the codebase, rather accept it and visualize how you'll get back the control of the steering wheel when time comes. Don't try to regain control to early or to late or you'll lose control altogether.</p>

<blockquote><p>How do you deal with your codebase that drastically changes on a weekly basis? How about when it starts to stabilize?</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Company Smells]]></title>
    <link href="http://heelhook.github.io/blog/2012/12/18/company-smells/"/>
    <updated>2012-12-18T00:36:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2012/12/18/company-smells</id>
    <content type="html"><![CDATA[<p>Most developers won't need a reminder of what a "* Smell" refers to, but I'll
assume that the companies that fit the description of this post won't
(incidentally, those companies probably wouldn't read this blog post either). A
"code smell" is an indication, a symptom, within a codebase, of a problem.</p>

<p>A company smell is an indication of a larger problem in an organization.</p>

<p>When a company uses a service for sourcing developers in today's crazy world
that opens with the following epic line:</p>

<blockquote><h4>What we do...</h4>

<p>We're a new style of recruiting service that charges by the hour
for our time.</p></blockquote>

<p>As a developer/hacker/überninja/engineering-talent all I see is a giant red
flag. These are not recruiters that will try to get to understand the
requirements of the position they are trying to fill, nor will they try to
understand how I, as a human being, can contribute (or detract) in that
position. Quite the opposite, the incentive is in delivering a result quickly.
Any result. Quickly. Time is money. And all ruby on rails ninjas are made equal.</p>

<p>The homepage of "theSourcery" goes on to say:</p>

<blockquote><p>We're re-inventing the way recruiting is done by changing the incentive
structure for recruiters and leveraging data and software while keeping our
work human powered and personal.</p></blockquote>

<!-- more -->


<p>I'll (fail at trying to) overlook the obvious fact that there is no explanation
of what this likely earth-shattering re-invention of the way recruitment is
conducted in their site, I'll just point out how I must be missing something
huge by the fact that one sentence before that they were mentioning how they are
hunting for developers on an hourly rate and later on go on to say that you are
keeping things personal.</p>

<p>It seems that some companies don't get what being on the receiving end of these
type of recruiters is like. The fact that they are charging by the hour
incentivizes all the wrong aspects of recruitment while completely undermining
the positive (and often under appreciated by developers, specially in the HN
crowd).</p>

<p>The company itself seems mildly interesting (sorry for falling into the <em>prima
donna</em> cliché). I'm a bit surprised that they are replicating a feature
currently existent in iOS's Passbook, yet they don't mention it. If I was
writing the job spec I would include the differentiator factor within the first
paragraph; joining a startup (again, specially on this market) requires not only
a good position with fair compensation, but, at least to me, believing in what
the company's outcome and impact will be is extremely important. A lot of us
work for "free" on things when we believe in them enough.</p>

<p>The fact that this particular company will try to hire from a pool of recruiters
that will end up being incentives to spam that hell out of every email address
they get their hands on, is a very powerful company smell: they don't care about
the practices of people they work with, and they'll likely won't care about the
type of developers they find.</p>

<p>No, I'm not replying to your (absolutely decontextualized) email, Angelina.
Sorry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The value of idle time]]></title>
    <link href="http://heelhook.github.io/blog/2010/02/23/the-value-of-idle-time/"/>
    <updated>2010-02-23T23:08:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/02/23/the-value-of-idle-time</id>
    <content type="html"><![CDATA[<p>I have recently read a quote attributed to Einstein, it reads something along the lines of “the best ideas I have I have them while I shave”. This got me thinking, how much idle time do I have on any given month?</p>

<p>I am an Internet junky, and completely obsessed with efficiency, so I may not be a good statistical sample, but bear with me on this one.</p>

<p>Aftter considering the different idle times we get throughout our daily lives, commuting, personal care time, all meals, I have realized that most of those times I have occupied them (except commute since I work out of my home office) with some supposedly time saving activity, whether it is checking my email, browsing, reading blogs, even when I shower I have managed to be able to do “something”, even if it is just listening to music (come to think about it maybe I could tune some podcasts).</p>

<p>It feels like I’m constantly multitasking, maybe this is a good thing, or maybe not. Even now, I am on my way to a medical check up writing this post on my iPhone.</p>

<p>This forces me to ask myself “What’s the value of idle time?”. For some reason it feels like my ideas begin to flow so much better when I’m not doing something else, when I’m only commuting. It would seem like our information overload and constantly-online capabilities on our smartphones, our inclination to be constatly productive has actually defeated it’s own purpose messing with our creativity.</p>

<p>Listening to other people’s ideas requires not listening to ours, at least for a brief moment. You can use others’ ideas as a trigger for inspiration but at one point the marginal value of listening becomes detrimental to our own creativity and innovation. In the very same way that this happens with consumers indifference curves this can’t be quantifies nor generalized as more people require more listening and some people require less listening.</p>

<p>Ok enough about this, I’m going to continue reading on my kindle now.</p>
]]></content>
  </entry>
  
</feed>
