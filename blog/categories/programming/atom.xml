<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | heelhook]]></title>
  <link href="http://heelhook.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://heelhook.github.io/"/>
  <updated>2013-04-15T11:26:38-04:00</updated>
  <id>http://heelhook.github.io/</id>
  <author>
    <name><![CDATA[Pablo Fernandez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Challenges of maintaining a rapidly changing code base]]></title>
    <link href="http://heelhook.github.io/blog/2013/02/18/challenges-of-maintaining-a-rapidly-changing-code-base/"/>
    <updated>2013-02-18T19:39:00-05:00</updated>
    <id>http://heelhook.github.io/blog/2013/02/18/challenges-of-maintaining-a-rapidly-changing-code-base</id>
    <content type="html"><![CDATA[<p>For the past year, I have been working as cofounder at SkillHound working intensely on the development side. The concept of SkillHound came to be after spending a few months in 2011 reading and implementing proof of concepts data mining code to extract knowledge from git repositories.</p>

<p>My cofounder and myself are both (who isn't these days among the HN crowd?) Steve Blank's method practitioners wannabes. We couldn't wait to get our feet wet going through the Startup Owner's Manual's table of contents with our very own concept.</p>

<p>Derek is not a developer, although he is good at screwing up the indention of my HAML files haha — jk derek! As the only developer in the team, I'm the sole responsible for the codebase's sanity (and my own).</p>

<!-- more -->


<p>I've managed several codebases before (as pretty much every other developer out there). Coming from CVS and SVN, I learned to love and accept Git's amazing power and minor-ux annoyances (let's not start a flamewar here).</p>

<p>The experience with this startup's codebase has been different. Very, very different. Following the Customer Discovery method, we implemented a barebones prototype of our product, not quite a full blown MVP but a <em>Minimal Viable Demo</em>. And all was good. We would go to what we thought might be our prospective customer, talked to them for 45 minutes, demoed for 5 minutes, and talked for another 10 minutes.</p>

<p>This was an extremely useful process, every single time we would finish a call or a meeting we would have ideas of what to change or what the product was. Over the course of just two or three months we had changed our target industry, shifted the target user two or three times and created what seemed (and was, for all intents and purposes) an entirely new product about 10 times. You could say that the only thing that didn't change was name, and you would be wrong, because we changed that too after some time.</p>

<p>Throughout the first stage of this startup, as with most if not all startups, the priority was (as it should be) finding a market and a pain point that can be addresses within that market, then identifying what the MVP that addresses that pain point should look like. Code base stability, proper engineering and maintainability come at a distant third or fourth in the list of priorities.</p>

<p>Particularly in the first few months we had very drastic shifts, and each week the product would change significantly. In hindsight, perhaps a new code base would be in order on every micro pivot, leaving behind a library of common modules that were being used, but this was hard, as hardly a single method would remain unaffected. But that's not what happened. No. As we shifted from one market to the other, from user to user, I would slowly adapt existent code in the name of speed, I would reuse code that was intended for A to be used for A', only to realize two days later that A' was not in our best interest, but might work well to address A''.</p>

<p>Over time, the codebase became chaotic, with entires modules of the architecture that remained from previous iterations, much like our <a href="http://whyevolutionistrue.wordpress.com/2011/02/22/vestigial-trait-the-arrector-pili/">arrector pili</a>, just a vestigial trait of a predecessor of the current being.</p>

<h2>Defaulting on technical debt — AKA "F*ck it, lets rewrite this"</h2>

<p>Most of us, at one point or another, flirt with the idea of refactoring an entire or significant part of a codebase. Oh, the magic wand that will fix all problems in that tired codebase we inherited (from someone else or from ourselves).</p>

<p>As you flirt more and more with the idea it becomes ever more compelling, the mere fact of thinking about adding a new feature to the polluted codebase hurts when you compare it to the inherit beauty and simplicityof a naked canvas. As the idea starts taking shape of how you would do it right this time, how if you only had the time all problems would be fixed. This time it'll be different. You are a different person, you know more about the product, about the technology, about the market.</p>

<p>And yes, in all likelyhood the product will be different. But that doesn't mean that in five months or a year you won't be in a similar situation, again, reaching for the blank canvas.</p>

<p>The reality is, rewriting a codebase is, almost always a receipe for disaster, unless your product belongs to that theoretical 1% of niches where speed, market landscape and needs don't rapidly change, rewriting will create a significant advantage to your competitors.</p>

<h2><code>git init .</code></h2>

<p>I admit it I gave away to the temptation. After a couple of days of entertaining the idea of a complete rewrite, even after being burned many many years ago with one that ultimately destroyed my email client for Gnome project. I realized I was being lured in into Fuckville. 180-U-turn. Now.</p>

<p>Instead, I created a branch where I would start deleting code like there was no tomorrow. No. It wasn't a rewrite, it was the ultimate axing of obsolete code. A good way to start a refactor effort that will accompany a healthy codebase throughout its lifetime.</p>

<h2>Lesson</h2>

<p>What am I doing now that minimizes the problems related to the fast pace of a code base? What did I change from the start?</p>

<p>The lessons I've drawn from this experience have been mostly related to observe what I did and largely repeat the same behavior but with more determination. Its largely the lesson I drew from <a href="http://www.amazon.com/The-Art-Racing-Rain-Novel/dp/0061537969"><em>The Art of Racing in the Rain</em></a>: <em>when you anticipate chaos, don't try to control it, rather, factor it in and accept it</em>.</p>

<p>What I mean by that is, when dealing with a codebase that deals with an unknown and ambiguous problem, don't try to tame the instability and chaotic nature of the codebase, rather accept it and visualize how you'll get back the control of the steering wheel when time comes. Don't try to regain control to early or to late or you'll lose control altogether.</p>

<blockquote><p>How do you deal with your codebase that drastically changes on a weekly basis? How about when it starts to stabilize?</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compare permissions script]]></title>
    <link href="http://heelhook.github.io/blog/2011/03/15/compare-permissions-script/"/>
    <updated>2011-03-15T23:15:00-04:00</updated>
    <id>http://heelhook.github.io/blog/2011/03/15/compare-permissions-script</id>
    <content type="html"><![CDATA[<p>Recently I needed to compare some permissions between two directories, I wrote this script that could be useful for someone else:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<h1>This script will go through a list of files and directories and match their</h1>

<h1>permissions against another directory, it can also copy the permissions from</h1>

<h1>the first directory.</h1>

<p>#</p>

<h1>Written by Pablo Fernandez</h1>

<p>#</p>

<p>function showusage()
{</p>

<pre><code>    echo "USAGE: $0 OPTS DIR1 DIR2"
    echo
    echo "OPTIONS:"
    echo "-a Apply changes (update permissions of DIR2"
    echo "-w Warning on missing files"
    echo "-q Quiet mode"
    echo "-h Show this help"
    echo "The directory DIR1 will be matched against DIR2. The directory DIR2 will"
    echo "be corrected with all permission differences."
</code></pre>

<p>}</p>

<p>apply_changes=""
```</p>

<!-- more -->


<p>```bash
while [ ! -z "$1" ]; do</p>

<pre><code>    case "$1" in
            -a)
                    apply_changes=1
                    ;;
            -w)
                    warn_on_missing=1
                    ;;
            -q)
                    quiet=1
                    ;;
            -h)
                    showusage
                    exit 0
                    ;;
            *)
                    if [ -z "$orig" ]; then
                            orig=$1
                    elif [ -z "$targ" ]; then
                            targ=$1
                    else
                            echo "Unknown flag $1"
                            showusage
                            exit 1
                    fi
    esac
    shift
</code></pre>

<p>done</p>

<p>if [ -z "$orig" -o -z "$targ" ]; then</p>

<pre><code>    showusage
    exit 1
</code></pre>

<p>fi</p>

<h1>Change into the directory and get a list of files and dirs</h1>

<p>pushd . >/dev/null
cd $orig
list=<code>find .</code>
popd >/dev/null</p>

<h1>Go through the list</h1>

<p>for i in $list; do</p>

<pre><code>    # Get the permissions of the orig file and targ file
    p=`stat -c %a $orig/$i`
    p1=`stat -c %a $targ/$i 2&gt;/dev/null`

    [ "$quiet" = "" ] &amp;&amp; echo -n "$i: "

    if [ "$p1" = "" ]; then
            # No permissions for targ file, targ file doesn't exist
            [ "$quiet" = "" ] &amp;&amp; echo "not present"

            if [ "$warn_on_missing" != "" -a "$quiet" != "" ]; then
                    echo "$targ/$i not present"
            fi
    else
            # Permission for targ file, compare
            if [ "$p" != "$p1" ]; then
                    # Permissions are different going to try to set permissions
                    if [ "$apply_changes" != "" ]; then
                            # Set permissions
                            e=`chmod $p $targ/$i 2&gt;&amp;1 &gt;/dev/null`

                            if [ "$?" != "0" ]; then
                                    [ "$quiet" = "" ] &amp;&amp; echo "different permission, change to $p failed, $e"
                                    [ "$quiet" != "" ] &amp;&amp; echo "$e"
                            else
                                    [ "$quiet" = "" ] &amp;&amp; echo "set to $p"
                            fi
                    else
                            # Running just for report
                            [ "$quiet" = "" ] &amp;&amp; echo "different, orig is $p targ is $p1"
                            [ "$quiet" != "" ] &amp;&amp; echo "Permission of $targ/$i is different than $orig/$i"
                    fi
            else
                    [ "$quiet" = "" ] &amp;&amp; echo "Ok"
            fi
    fi
</code></pre>

<p>done
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acts_as_authentic nightmare]]></title>
    <link href="http://heelhook.github.io/blog/2010/06/23/acts-as-authentic-nightmare/"/>
    <updated>2010-06-23T23:10:00-04:00</updated>
    <id>http://heelhook.github.io/blog/2010/06/23/acts-as-authentic-nightmare</id>
    <content type="html"><![CDATA[<p>So I decided to do a few tests on the Server Protectors’ website and noticed a few annoyances with the register form, I decided to delve in and fix it, just a couple of extra validations, not too much.</p>

<p>Half an hour later I was pretty much ready to do some open heart surgery on authlogic, man is the configuration of act_as_authentic confusing! And of course, RTFMing doesn’t work, there is not a single example of how changing the default act_as_authentic configuration works!</p>

<p>Searching around I found a few persons with the same problem and no solutions, so I thought I should share how I did it, or rather, what I did.</p>

<p>This is the resulting code:</p>

<p><code>ruby
acts_as_authentic do |c|
 c.validates_uniqueness_of_email_field_options = {:if =&gt; "false"}
 c.validates_length_of_login_field_options = {:if =&gt; "false", :minimum =&gt; 4}
 c.validates_format_of_login_field_options = {:if =&gt; "false", :with =&gt; Authlogic::Regex.login}
 c.validates_length_of_email_field_options = {:if =&gt; "false", :minimum =&gt; 4}
 c.validates_confirmation_of_password_field_options = {:if =&gt; "false"}
 c.validates_length_of_password_confirmation_field_options = {:if =&gt; "false", :minimum =&gt; 4 }
end
</code>
So as you can see a couple of options are a bit lame, like having a minimum when the if is being set to false, well, if you remove the minumum validates_length_of will complain (it makes sense from validates_length_of point of view, after all, if you are never going to be using the validation why call the function at all?)</p>

<p>I hope this helps and saves some time.</p>
]]></content>
  </entry>
  
</feed>
