<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[heelhook]]></title>
  <link href="http://heelhook.github.io/atom.xml" rel="self"/>
  <link href="http://heelhook.github.io/"/>
  <updated>2013-05-29T18:03:36-03:00</updated>
  <id>http://heelhook.github.io/</id>
  <author>
    <name><![CDATA[Pablo Fernandez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School]]></title>
    <link href="http://heelhook.github.io/blog/2013/05/29/hacker-school/"/>
    <updated>2013-05-29T18:02:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2013/05/29/hacker-school</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The essay is the unit]]></title>
    <link href="http://heelhook.github.io/blog/2013/04/15/the-essay-is-the-unit/"/>
    <updated>2013-04-15T11:18:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2013/04/15/the-essay-is-the-unit</id>
    <content type="html"><![CDATA[<p>While I was reading <a href="https://medium.com/life-hacks/80f8d525b0d8">“The distraction-free iPhone (or ‘Why I’m happier since I
disabled Safari’)”</a> I noticed a bunch of icons alongside different
paragraphs.</p>

<p>Obviously, before finishing reading an article about short time span and
productivity (how many productivity articles have been written in the past
couple months?!), I had to know what those icons were.</p>

<p>As I suspected, they were discussions that medium.com allows to have on each
single paragraph.</p>

<!-- more -->


<p>I believe this is wrong.</p>

<p>The smallest unit of an essay is not a paragraph, a sentence, or a word. Its the
essay. Motivating and promoting people to dissect and discuss bits and fragments
of an essay is a recipe for misunderstandings and half-baked thoughts. I
understand the motivation, but I believe it sets up the stage to have the wrong
kind of discussions.</p>

<p>FWIW, the article itself, <a href="https://medium.com/life-hacks/80f8d525b0d8">“The distraction-free iPhone (or ‘Why I’m happier
since I disabled Safari’)”</a>, is good and a worthwhile experiment. Not an
insightful comment, but hey, I’d rather try the experiment <a href="https://medium.com/@jakek">Jake</a> proposes
before commenting on it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenges of maintaining a rapidly changing code base]]></title>
    <link href="http://heelhook.github.io/blog/2013/02/18/challenges-of-maintaining-a-rapidly-changing-code-base/"/>
    <updated>2013-02-18T19:39:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2013/02/18/challenges-of-maintaining-a-rapidly-changing-code-base</id>
    <content type="html"><![CDATA[<p>For the past year, I have been working as cofounder at SkillHound working intensely on the development side. The concept of SkillHound came to be after spending a few months in 2011 reading and implementing proof of concepts data mining code to extract knowledge from git repositories.</p>

<p>My cofounder and myself are both (who isn&#8217;t these days among the HN crowd?) Steve Blank&#8217;s method practitioners wannabes. We couldn&#8217;t wait to get our feet wet going through the Startup Owner&#8217;s Manual&#8217;s table of contents with our very own concept.</p>

<p>Derek is not a developer, although he is good at screwing up the indention of my HAML files haha — jk derek! As the only developer in the team, I&#8217;m the sole responsible for the codebase&#8217;s sanity (and my own).</p>

<!-- more -->


<p>I&#8217;ve managed several codebases before (as pretty much every other developer out there). Coming from CVS and SVN, I learned to love and accept Git&#8217;s amazing power and minor-ux annoyances (let&#8217;s not start a flamewar here).</p>

<p>The experience with this startup&#8217;s codebase has been different. Very, very different. Following the Customer Discovery method, we implemented a barebones prototype of our product, not quite a full blown MVP but a <em>Minimal Viable Demo</em>. And all was good. We would go to what we thought might be our prospective customer, talked to them for 45 minutes, demoed for 5 minutes, and talked for another 10 minutes.</p>

<p>This was an extremely useful process, every single time we would finish a call or a meeting we would have ideas of what to change or what the product was. Over the course of just two or three months we had changed our target industry, shifted the target user two or three times and created what seemed (and was, for all intents and purposes) an entirely new product about 10 times. You could say that the only thing that didn&#8217;t change was name, and you would be wrong, because we changed that too after some time.</p>

<p>Throughout the first stage of this startup, as with most if not all startups, the priority was (as it should be) finding a market and a pain point that can be addresses within that market, then identifying what the MVP that addresses that pain point should look like. Code base stability, proper engineering and maintainability come at a distant third or fourth in the list of priorities.</p>

<p>Particularly in the first few months we had very drastic shifts, and each week the product would change significantly. In hindsight, perhaps a new code base would be in order on every micro pivot, leaving behind a library of common modules that were being used, but this was hard, as hardly a single method would remain unaffected. But that&#8217;s not what happened. No. As we shifted from one market to the other, from user to user, I would slowly adapt existent code in the name of speed, I would reuse code that was intended for A to be used for A&#8217;, only to realize two days later that A&#8217; was not in our best interest, but might work well to address A&#8221;.</p>

<p>Over time, the codebase became chaotic, with entires modules of the architecture that remained from previous iterations, much like our <a href="http://whyevolutionistrue.wordpress.com/2011/02/22/vestigial-trait-the-arrector-pili/">arrector pili</a>, just a vestigial trait of a predecessor of the current being.</p>

<h2>Defaulting on technical debt — AKA &#8220;F*ck it, lets rewrite this&#8221;</h2>

<p>Most of us, at one point or another, flirt with the idea of refactoring an entire or significant part of a codebase. Oh, the magic wand that will fix all problems in that tired codebase we inherited (from someone else or from ourselves).</p>

<p>As you flirt more and more with the idea it becomes ever more compelling, the mere fact of thinking about adding a new feature to the polluted codebase hurts when you compare it to the inherit beauty and simplicityof a naked canvas. As the idea starts taking shape of how you would do it right this time, how if you only had the time all problems would be fixed. This time it&#8217;ll be different. You are a different person, you know more about the product, about the technology, about the market.</p>

<p>And yes, in all likelyhood the product will be different. But that doesn&#8217;t mean that in five months or a year you won&#8217;t be in a similar situation, again, reaching for the blank canvas.</p>

<p>The reality is, rewriting a codebase is, almost always a receipe for disaster, unless your product belongs to that theoretical 1% of niches where speed, market landscape and needs don&#8217;t rapidly change, rewriting will create a significant advantage to your competitors.</p>

<h2><code>git init .</code></h2>

<p>I admit it I gave away to the temptation. After a couple of days of entertaining the idea of a complete rewrite, even after being burned many many years ago with one that ultimately destroyed my email client for Gnome project. I realized I was being lured in into Fuckville. 180-U-turn. Now.</p>

<p>Instead, I created a branch where I would start deleting code like there was no tomorrow. No. It wasn&#8217;t a rewrite, it was the ultimate axing of obsolete code. A good way to start a refactor effort that will accompany a healthy codebase throughout its lifetime.</p>

<h2>Lesson</h2>

<p>What am I doing now that minimizes the problems related to the fast pace of a code base? What did I change from the start?</p>

<p>The lessons I&#8217;ve drawn from this experience have been mostly related to observe what I did and largely repeat the same behavior but with more determination. Its largely the lesson I drew from <a href="http://www.amazon.com/The-Art-Racing-Rain-Novel/dp/0061537969"><em>The Art of Racing in the Rain</em></a>: <em>when you anticipate chaos, don&#8217;t try to control it, rather, factor it in and accept it</em>.</p>

<p>What I mean by that is, when dealing with a codebase that deals with an unknown and ambiguous problem, don&#8217;t try to tame the instability and chaotic nature of the codebase, rather accept it and visualize how you&#8217;ll get back the control of the steering wheel when time comes. Don&#8217;t try to regain control to early or to late or you&#8217;ll lose control altogether.</p>

<blockquote><p>How do you deal with your codebase that drastically changes on a weekly basis? How about when it starts to stabilize?</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPad blogging on the go]]></title>
    <link href="http://heelhook.github.io/blog/2012/12/28/iPad-blogging-on-the-go/"/>
    <updated>2012-12-28T05:02:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2012/12/28/iPad-blogging-on-the-go</id>
    <content type="html"><![CDATA[<p>And in preparations for my trip I decided to look into what possibilities I had
for some light, offline-friendly blogging on my Jekyll blog.</p>

<p>Turns out this is easily accomplished mixing a few tools together: iA for iPad,
Dropbox and a simple daemon running through <code>incron</code> (cron that reacts to inode
changes instead of time) was all I needed. And yes, I&#8217;m typing this on my iPad
and publishing it just by&#8230; actually, doing nothing but typing!</p>

<p>Pretty cool!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[psyched!]]></title>
    <link href="http://heelhook.github.io/blog/2012/12/27/psyched/"/>
    <updated>2012-12-27T23:15:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2012/12/27/psyched</id>
    <content type="html"><![CDATA[<p>I&#8217;m psyched, I&#8217;m now T minus ~20 hours away from the start of my journey around
Southern Africa, loading my physical backpack and unloading my mental one.</p>

<p>For the next few weeks I don&#8217;t expect to have internet access. I&#8217;ll be back on
January 19th.</p>

<p>And yes, I&#8217;ll repeat the cliché (hey, they are clichés for a reason, right?)</p>

<blockquote><p>&#8220;Travel is fatal to prejudice, bigotry, and narrow-mindedness.&#8221; - Mark Twain</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Company Smells]]></title>
    <link href="http://heelhook.github.io/blog/2012/12/18/company-smells/"/>
    <updated>2012-12-18T00:36:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2012/12/18/company-smells</id>
    <content type="html"><![CDATA[<p>Most developers won&#8217;t need a reminder of what a &#8220;* Smell&#8221; refers to, but I&#8217;ll
assume that the companies that fit the description of this post won&#8217;t
(incidentally, those companies probably wouldn&#8217;t read this blog post either). A
&#8220;code smell&#8221; is an indication, a symptom, within a codebase, of a problem.</p>

<p>A company smell is an indication of a larger problem in an organization.</p>

<p>When a company uses a service for sourcing developers in today&#8217;s crazy world
that opens with the following epic line:</p>

<blockquote><h4>What we do&#8230;</h4>

<p>We&#8217;re a new style of recruiting service that charges by the hour
for our time.</p></blockquote>

<p>As a developer/hacker/überninja/engineering-talent all I see is a giant red
flag. These are not recruiters that will try to get to understand the
requirements of the position they are trying to fill, nor will they try to
understand how I, as a human being, can contribute (or detract) in that
position. Quite the opposite, the incentive is in delivering a result quickly.
Any result. Quickly. Time is money. And all ruby on rails ninjas are made equal.</p>

<p>The homepage of &#8220;theSourcery&#8221; goes on to say:</p>

<blockquote><p>We&#8217;re re-inventing the way recruiting is done by changing the incentive
structure for recruiters and leveraging data and software while keeping our
work human powered and personal.</p></blockquote>

<!-- more -->


<p>I&#8217;ll (fail at trying to) overlook the obvious fact that there is no explanation
of what this likely earth-shattering re-invention of the way recruitment is
conducted in their site, I&#8217;ll just point out how I must be missing something
huge by the fact that one sentence before that they were mentioning how they are
hunting for developers on an hourly rate and later on go on to say that you are
keeping things personal.</p>

<p>It seems that some companies don&#8217;t get what being on the receiving end of these
type of recruiters is like. The fact that they are charging by the hour
incentivizes all the wrong aspects of recruitment while completely undermining
the positive (and often under appreciated by developers, specially in the HN
crowd).</p>

<p>The company itself seems mildly interesting (sorry for falling into the <em>prima
donna</em> cliché). I&#8217;m a bit surprised that they are replicating a feature
currently existent in iOS&#8217;s Passbook, yet they don&#8217;t mention it. If I was
writing the job spec I would include the differentiator factor within the first
paragraph; joining a startup (again, specially on this market) requires not only
a good position with fair compensation, but, at least to me, believing in what
the company&#8217;s outcome and impact will be is extremely important. A lot of us
work for &#8220;free&#8221; on things when we believe in them enough.</p>

<p>The fact that this particular company will try to hire from a pool of recruiters
that will end up being incentives to spam that hell out of every email address
they get their hands on, is a very powerful company smell: they don&#8217;t care about
the practices of people they work with, and they&#8217;ll likely won&#8217;t care about the
type of developers they find.</p>

<p>No, I&#8217;m not replying to your (absolutely decontextualized) email, Angelina.
Sorry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro]]></title>
    <link href="http://heelhook.github.io/blog/2012/07/22/intro/"/>
    <updated>2012-07-22T08:23:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2012/07/22/intro</id>
    <content type="html"><![CDATA[<p>Testing!</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin, massa eu vestibulum laoreet, nibh ante vulputate lorem, ac lobortis ante tellus eu mi. Duis sem nisi, luctus at feugiat eget, fringilla ut tellus. Nam a molestie justo. Sed pulvinar est vitae tellus semper tincidunt. Fusce euismod luctus lacus nec placerat. Mauris rutrum scelerisque nulla ut tempor. Nunc porttitor posuere mi, aliquet vehicula lorem feugiat in. Ut ut fermentum risus. Aliquam tincidunt ultricies ante sit amet bibendum. Cras nec sapien odio. Duis posuere congue sem, at congue massa faucibus at.</p>

<p>Integer ut sapien eget nisl auctor faucibus ut fermentum arcu. Nunc rutrum urna non risus congue et tristique felis eleifend. Maecenas blandit est eu mauris aliquam aliquet. Quisque porttitor enim eget risus blandit in mollis orci eleifend. Nam malesuada nulla sed lacus elementum placerat accumsan arcu rhoncus. Phasellus feugiat cursus turpis nec facilisis. Duis eget metus arcu, eget commodo velit. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer cursus vulputate enim, vel gravida velit faucibus et. Ut a urna vitae tellus cursus rhoncus. Maecenas at odio eget quam cursus elementum. Aliquam vitae eros quis tellus laoreet accumsan sed id lorem. Suspendisse et rutrum leo. Integer scelerisque vestibulum adipiscing. In posuere, libero ac accumsan suscipit, nulla ligula gravida erat, ut tempor odio erat nec sem. Quisque justo ipsum, adipiscing volutpat varius vitae, blandit eget nisi.</p>

<p>Nullam adipiscing neque ac lacus commodo vitae imperdiet dui sollicitudin. Ut ac nunc augue. Nam at sem ut quam commodo aliquet vitae vitae dui. Vivamus scelerisque felis eget dolor cursus feugiat. Phasellus at dui sed lectus scelerisque pretium. Etiam nec massa ut justo vestibulum fringilla ac vitae urna. Morbi tortor erat, tempus sed consectetur at, elementum nec eros. Vivamus mattis arcu a sapien semper non lacinia eros pretium.</p>

<p>Proin ut hendrerit arcu. Maecenas ullamcorper tristique magna vel mattis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam tincidunt euismod viverra. In sit amet neque turpis. Suspendisse ac sapien mi, id blandit purus. Ut tortor turpis, rutrum ac tempor at, accumsan sit amet erat. Etiam ultricies eleifend dolor, eget tempus justo tristique vitae. In hac habitasse platea dictumst. Aliquam eu enim neque.</p>

<p>Morbi massa lorem, viverra non dictum at, malesuada vel nibh. Nam fermentum lobortis varius. Sed a nulla lacus, quis posuere risus. Nunc id urna libero, quis rutrum mi. In gravida felis urna. Praesent nec dolor ac urna tempor fermentum. Curabitur rutrum arcu et lorem volutpat viverra.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compare permissions script]]></title>
    <link href="http://heelhook.github.io/blog/2011/03/15/compare-permissions-script/"/>
    <updated>2011-03-15T23:15:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2011/03/15/compare-permissions-script</id>
    <content type="html"><![CDATA[<p>Recently I needed to compare some permissions between two directories, I wrote this script that could be useful for someone else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># This script will go through a list of files and directories and match their</span>
</span><span class='line'><span class="c"># permissions against another directory, it can also copy the permissions from</span>
</span><span class='line'><span class="c"># the first directory.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Written by Pablo Fernandez</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>showusage<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;USAGE: $0 OPTS DIR1 DIR2&quot;</span>
</span><span class='line'>      <span class="nb">echo</span>
</span><span class='line'><span class="nb">     echo</span> <span class="s2">&quot;OPTIONS:&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;-a Apply changes (update permissions of DIR2&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;-w Warning on missing files&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;-q Quiet mode&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;-h Show this help&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;The directory DIR1 will be matched against DIR2. The directory DIR2 will&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;be corrected with all permission differences.&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">apply_changes</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">while</span> <span class="o">[</span> ! -z <span class="s2">&quot;$1&quot;</span> <span class="o">]</span>; <span class="k">do</span>
</span><span class='line'><span class="k">      case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>              -a<span class="o">)</span>
</span><span class='line'>                      <span class="nv">apply_changes</span><span class="o">=</span>1
</span><span class='line'>                      ;;
</span><span class='line'>              -w<span class="o">)</span>
</span><span class='line'>                      <span class="nv">warn_on_missing</span><span class="o">=</span>1
</span><span class='line'>                      ;;
</span><span class='line'>              -q<span class="o">)</span>
</span><span class='line'>                      <span class="nv">quiet</span><span class="o">=</span>1
</span><span class='line'>                      ;;
</span><span class='line'>              -h<span class="o">)</span>
</span><span class='line'>                      showusage
</span><span class='line'>                      <span class="nb">exit </span>0
</span><span class='line'>                      ;;
</span><span class='line'>              *<span class="o">)</span>
</span><span class='line'>                      <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$orig&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">                              </span><span class="nv">orig</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>                      <span class="k">elif</span> <span class="o">[</span> -z <span class="s2">&quot;$targ&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">                              </span><span class="nv">targ</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>                      <span class="k">else</span>
</span><span class='line'><span class="k">                              </span><span class="nb">echo</span> <span class="s2">&quot;Unknown flag $1&quot;</span>
</span><span class='line'>                              showusage
</span><span class='line'>                              <span class="nb">exit </span>1
</span><span class='line'>                      <span class="k">fi</span>
</span><span class='line'><span class="k">      esac</span>
</span><span class='line'><span class="k">      </span><span class="nb">shift</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$orig&quot;</span> -o -z <span class="s2">&quot;$targ&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span>showusage
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change into the directory and get a list of files and dirs</span>
</span><span class='line'><span class="nb">pushd</span> . &gt;/dev/null
</span><span class='line'><span class="nb">cd</span> <span class="nv">$orig</span>
</span><span class='line'><span class="nv">list</span><span class="o">=</span><span class="sb">`</span>find .<span class="sb">`</span>
</span><span class='line'><span class="nb">popd</span> &gt;/dev/null
</span><span class='line'>
</span><span class='line'><span class="c"># Go through the list</span>
</span><span class='line'><span class="k">for </span>i in <span class="nv">$list</span>; <span class="k">do</span>
</span><span class='line'>      <span class="c"># Get the permissions of the orig file and targ file</span>
</span><span class='line'>      <span class="nv">p</span><span class="o">=</span><span class="sb">`</span>stat -c %a <span class="nv">$orig</span>/<span class="nv">$i</span><span class="sb">`</span>
</span><span class='line'>      <span class="nv">p1</span><span class="o">=</span><span class="sb">`</span>stat -c %a <span class="nv">$targ</span>/<span class="nv">$i</span> 2&gt;/dev/null<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> -n <span class="s2">&quot;$i: &quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$p1&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>              <span class="c"># No permissions for targ file, targ file doesn&#39;t exist</span>
</span><span class='line'>              <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;not present&quot;</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$warn_on_missing&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> -a <span class="s2">&quot;$quiet&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">                      </span><span class="nb">echo</span> <span class="s2">&quot;$targ/$i not present&quot;</span>
</span><span class='line'>              <span class="k">fi</span>
</span><span class='line'><span class="k">      else</span>
</span><span class='line'>              <span class="c"># Permission for targ file, compare</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$p&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$p1&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>                      <span class="c"># Permissions are different going to try to set permissions</span>
</span><span class='line'>                      <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$apply_changes&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>                              <span class="c"># Set permissions</span>
</span><span class='line'>                              <span class="nv">e</span><span class="o">=</span><span class="sb">`</span>chmod <span class="nv">$p</span> <span class="nv">$targ</span>/<span class="nv">$i</span> 2&gt;&amp;1 &gt;/dev/null<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>                              <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> !<span class="o">=</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>                                      <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;different permission, change to $p failed, $e&quot;</span>
</span><span class='line'>                                      <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;$e&quot;</span>
</span><span class='line'>                              <span class="k">else</span>
</span><span class='line'>                                      <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;set to $p&quot;</span>
</span><span class='line'>                              <span class="k">fi</span>
</span><span class='line'><span class="k">                      else</span>
</span><span class='line'>                              <span class="c"># Running just for report</span>
</span><span class='line'>                              <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;different, orig is $p targ is $p1&quot;</span>
</span><span class='line'>                              <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;Permission of $targ/$i is different than $orig/$i&quot;</span>
</span><span class='line'>                      <span class="k">fi</span>
</span><span class='line'><span class="k">              else</span>
</span><span class='line'>                      <span class="o">[</span> <span class="s2">&quot;$quiet&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;Ok&quot;</span>
</span><span class='line'>              <span class="k">fi</span>
</span><span class='line'><span class="k">      fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acts_as_authentic nightmare]]></title>
    <link href="http://heelhook.github.io/blog/2010/06/23/acts-as-authentic-nightmare/"/>
    <updated>2010-06-23T23:10:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/06/23/acts-as-authentic-nightmare</id>
    <content type="html"><![CDATA[<p>So I decided to do a few tests on the Server Protectors’ website and noticed a few annoyances with the register form, I decided to delve in and fix it, just a couple of extra validations, not too much.</p>

<p>Half an hour later I was pretty much ready to do some open heart surgery on authlogic, man is the configuration of act_as_authentic confusing! And of course, RTFMing doesn’t work, there is not a single example of how changing the default act_as_authentic configuration works!</p>

<p>Searching around I found a few persons with the same problem and no solutions, so I thought I should share how I did it, or rather, what I did.</p>

<p>This is the resulting code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">acts_as_authentic</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'> <span class="n">c</span><span class="o">.</span><span class="n">validates_uniqueness_of_email_field_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:if</span> <span class="o">=&gt;</span> <span class="s2">&quot;false&quot;</span><span class="p">}</span>
</span><span class='line'> <span class="n">c</span><span class="o">.</span><span class="n">validates_length_of_login_field_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:if</span> <span class="o">=&gt;</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span> <span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'> <span class="n">c</span><span class="o">.</span><span class="n">validates_format_of_login_field_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:if</span> <span class="o">=&gt;</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="no">Authlogic</span><span class="o">::</span><span class="no">Regex</span><span class="o">.</span><span class="n">login</span><span class="p">}</span>
</span><span class='line'> <span class="n">c</span><span class="o">.</span><span class="n">validates_length_of_email_field_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:if</span> <span class="o">=&gt;</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span> <span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'> <span class="n">c</span><span class="o">.</span><span class="n">validates_confirmation_of_password_field_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:if</span> <span class="o">=&gt;</span> <span class="s2">&quot;false&quot;</span><span class="p">}</span>
</span><span class='line'> <span class="n">c</span><span class="o">.</span><span class="n">validates_length_of_password_confirmation_field_options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:if</span> <span class="o">=&gt;</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span> <span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So as you can see a couple of options are a bit lame, like having a minimum when the if is being set to false, well, if you remove the minumum validates_length_of will complain (it makes sense from validates_length_of point of view, after all, if you are never going to be using the validation why call the function at all?)</p>

<p>I hope this helps and saves some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XBMC issues with smb]]></title>
    <link href="http://heelhook.github.io/blog/2010/05/11/xbmc-issues-with-smb/"/>
    <updated>2010-05-11T23:19:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/05/11/xbmc-issues-with-smb</id>
    <content type="html"><![CDATA[<p>I’ve been having issues with XBMC playing files served through samba, I don’t recall when this started, but for sometime I couldn’t even browse the collection of files in my own server. Nothing changed, well, I did upgrade Ubuntu to 10.04 on my server, but I think this was happening before that.</p>

<p>Anyway, I browsed the internet and didn’t find anything related to this error or how to fix it.</p>

<p>After looking around in the configuration I’ve found something which caught my eye and I got it working.</p>

<p>The error I was getting was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>23:09:42 T:3077850992 M:1831804928   ERROR: SMBDirectory-&gt;GetDirectory: Unable to open directory : 'smb://'
</span><span class='line'>unix_err:'2' error : 'No such file or directory'
</span><span class='line'>23:09:42 T:3077850992 M:1831804928   ERROR: GetDirectory - Error getting smb://</span></code></pre></td></tr></table></div></figure>


<p>And what I had to do is remove the XML path in <code>$HOME/.xbmc/userdata/guisettings.xml</code> that started with the tag <code>&lt;smb&gt;</code>. Removed that, restarted XBMC and things started to work again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A brave new Media Center revisited]]></title>
    <link href="http://heelhook.github.io/blog/2010/03/06/a-brave-new-media-center-revisited/"/>
    <updated>2010-03-06T23:49:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/03/06/a-brave-new-media-center-revisited</id>
    <content type="html"><![CDATA[<p>I recently wrote a post about my new media center, running off my laptop, well, while that setup was sweet and all, there was some sort of hole in it, that is, my laptop went belly up…</p>

<p>That was quite unfortunate, but it gave me the possibility to play with some new stuff, namely ITX setups.</p>

<p>I have finished yesterday building my ITX box, an Intel D510mo with an Atom D510 processor (dual with hyperthreading so 4 threads), 2 GB of RAM at 800 Mhz, WiFi PCI card on a Vitsuba Blackbox case, with a generic DVD-RW.</p>

<p>The setup is very sweet, I had lots of troubles building the system, at one point I thought my motherboard was faulty and I had to take it back to the store, but it seems the motherboard was ok, it was simply a matter of the mother producing a short while sitting in the case because of a mislocated screw in the case.</p>

<p>After the case was done I proceeded to install Ubuntu Karmic 9.10, to my surprise I had lots of troubles installing it, I had to perform the installation booting the netinstall through PXE (since I was out of CDs and all stores were closed). Once I was able to install Ubuntu I found that Ubuntu didn’t support the video card in the motherboard, and during the boot sequence the screen would go blank and there was pretty much nothing I could do about it.</p>

<p>Googling around I found other users with the same problem and determined to go with the same solution others had used… saying goodbye to Ubuntu and the beautiful Debian and APT world and totally selling out to the Fedora and Red Hat town (notice my strong bias :p).</p>

<p>I went through the horrible Fedora installation experience which is like getting hit on the ballsack while driving on a bike with no seat, configured GDM to autostart (which amazingly is not supported through gdm-config) and then I proceeded to build XBMC (since there is no XBMC build for non debian distributions (well done, and no, I’m not being ironic)).</p>

<p>It turns out building something like XBMC with support for many different codecs is not as straightforward as imaginable, who would have thought?! (now I am being ironic).</p>

<p>Here are some tips for others:</p>

<ul>
<li>Add extra repositories (Fedora sucks)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>su -c <span class="s1">&#39;rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm&#39;</span>
</span><span class='line'>su -c <span class="s2">&quot;rpm -ivh http://rpm.livna.org/livna-release.rpm&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install extra packages (Fedora blows)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum -y install ccache subversion git gcc-c++ boost-devel mesa-libGL-devel glew-devel libmad-devel libjpeg-devel libsamplerate-devel libogg-devel libvorbis-devel freetype-devel fontconfig-devel bzip2-devel fribidi-devel sqlite-devel mysql-devel libpng-devel pcre-devel lzo-devel libcdio-devel libsmbclient-devel SDL-devel SDL_image-devel SDL_mixer-devel enca-devel jasper-devel libmms-devel libXt-devel libXtst-devel libXmu-devel libXinerama-devel libcurl-devel dbus-devel hal-devel pulseaudio-libs-devel pulseaudio-libs-zeroconf faac-devel avahi-devel ffmpeg-devel a52dec-devel libdca-devel faad2-devel mpeg2dec-devel libass-devel libmpcdec-devel flac-devel wavpack-devel python-devel cmake gperf unzip make libtool flex bison libtiff-devel avbin-devel libmicrohttpd-devel libdvdcss-devel faad2-devel
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Fix paths (Fedora reeks)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /usr/lib/mysql/libmysqlclient.so.16.*.* /usr/lib/libmysqlclient.so
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Get XBMC</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn co https://xbmc.svn.sourceforge.net/svnroot/xbmc/trunk/
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Build XBMC</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bootstrap
</span><span class='line'>./configure --disable-debug --enable-external-libfaad --enable-external-libdts --enable-mid --enable-profiling --enable-external-libmad --enable-external-liba52 --enable-external-libmpeg2 --enable-external-libass --enable-external-libvorbis --enable-external-libogg --enable-external-libmpcdec --enable-external-libflac --enable-external-libwavpack --enable-external-python
</span><span class='line'>make -j 4
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>make -j 4</code> command might succeed but not finish, I have found a few times that when using make in parallel even with multiple cores it will skip files, you want to use <code>make -j 4</code> a few times to accelerate the process but do make sure its actually finished running make.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The value of *selective* listening]]></title>
    <link href="http://heelhook.github.io/blog/2010/02/25/the-value-of-star-selectively-star-listening/"/>
    <updated>2010-02-25T23:26:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/02/25/the-value-of-star-selectively-star-listening</id>
    <content type="html"><![CDATA[<p>I have recently come across this eye opening post. I mean, it probably was eye opening back when it was written in 1995, heck, I bet most Newsweek readers back then yelled something like “I knew it, that Internet thing is bullcrap!”.</p>

<p>This article, astonishingly titled <a href="http://threewordchant.com/2010/02/24/why-the-internet-will-fail-from-1995/">Why the internet will fail</a>, runs down through the many reasons why Internet would be something we would all get over soon really quickly, like we did with Tamagotchis (thankfully).</p>

<p>Now, this is not your run of the mill ignorant news reporter who talks about things s/he doesn’t understand, this was written by <a href="http://en.wikipedia.org/wiki/Clifford_Stoll">Clifford Stoll</a>, an astronomer and technology writer, working out of the Lawrence Berkeley National Laboratory. Yet, he can be quoted saying</p>

<blockquote><p>Yet Nicholas Negroponte, director of the MIT Media Lab, predicts that we’ll soon buy books and newspapers straight over the Intenet. Uh, sure.</p></blockquote>

<p>This author was an authority, someone that we could think that knows much more than we do, so if we disagree with his view we might want to review our opinion.</p>

<p>And this is something that I have seen over and over again, the number of specialists, analysts, etcists, that express an opinion on their field and its completely wrong, completely off base. Of course, we are all humans, we tend to make mistakes, so don’t take this as being judgmental, I’m just saying, we should listen, but we should selectively listen and always make up our own mind and not act on other’s opinions but our own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The value of idle time]]></title>
    <link href="http://heelhook.github.io/blog/2010/02/23/the-value-of-idle-time/"/>
    <updated>2010-02-23T23:08:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/02/23/the-value-of-idle-time</id>
    <content type="html"><![CDATA[<p>I have recently read a quote attributed to Einstein, it reads something along the lines of “the best ideas I have I have them while I shave”. This got me thinking, how much idle time do I have on any given month?</p>

<p>I am an Internet junky, and completely obsessed with efficiency, so I may not be a good statistical sample, but bear with me on this one.</p>

<p>Aftter considering the different idle times we get throughout our daily lives, commuting, personal care time, all meals, I have realized that most of those times I have occupied them (except commute since I work out of my home office) with some supposedly time saving activity, whether it is checking my email, browsing, reading blogs, even when I shower I have managed to be able to do “something”, even if it is just listening to music (come to think about it maybe I could tune some podcasts).</p>

<p>It feels like I’m constantly multitasking, maybe this is a good thing, or maybe not. Even now, I am on my way to a medical check up writing this post on my iPhone.</p>

<p>This forces me to ask myself “What’s the value of idle time?”. For some reason it feels like my ideas begin to flow so much better when I’m not doing something else, when I’m only commuting. It would seem like our information overload and constantly-online capabilities on our smartphones, our inclination to be constatly productive has actually defeated it’s own purpose messing with our creativity.</p>

<p>Listening to other people’s ideas requires not listening to ours, at least for a brief moment. You can use others’ ideas as a trigger for inspiration but at one point the marginal value of listening becomes detrimental to our own creativity and innovation. In the very same way that this happens with consumers indifference curves this can’t be quantifies nor generalized as more people require more listening and some people require less listening.</p>

<p>Ok enough about this, I’m going to continue reading on my kindle now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The value of selfishness]]></title>
    <link href="http://heelhook.github.io/blog/2010/02/20/the-value-of-selfishness/"/>
    <updated>2010-02-20T23:11:00-03:00</updated>
    <id>http://heelhook.github.io/blog/2010/02/20/the-value-of-selfishness</id>
    <content type="html"><![CDATA[<p>I have recently had the opportunity to help out a friend who is launching her own company. This is the first time I have informally gave advice to a fellow entrepreneur and I have found it to be a very rich experience, where a lot of value is easily created, strengthening the “core friendship” in the process.</p>

<p>From a purely selfish point of view I have been enjoying myself, opening up to a new industry I haven’t gave too much thought ever before, and sharing ideas on the go. I have seen this before, but being the reminded of the richness of bouncing ideas off someones head and seeing what comes back at you is always a good and enjoyable thing.</p>

<p>Needless to say, I wish her the best of lucks in her new endeavor! Best of lucks, Lucila!</p>
]]></content>
  </entry>
  
</feed>
